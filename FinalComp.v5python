{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nFeed = Motor(Ports.PORT2, GearSetting.RATIO_18_1, True)\nliftM6 = Motor(Ports.PORT6, GearSetting.RATIO_18_1, False)\nCrane = Motor(Ports.PORT17, GearSetting.RATIO_18_1, False)\nrightMG_motor_a = Motor(Ports.PORT13, GearSetting.RATIO_36_1, False)\nrightMG_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_36_1, False)\nrightMG = MotorGroup(rightMG_motor_a, rightMG_motor_b)\nleftMG_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_36_1, True)\nleftMG_motor_b = Motor(Ports.PORT9, GearSetting.RATIO_36_1, True)\nleftMG = MotorGroup(leftMG_motor_a, leftMG_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nLeftVelo = 0\nRightVelo = 0\nprintPeriodic = 0\ntimePressed = 0\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nLeftVelo = 0\nRightVelo = 0\nprintPeriodic = 0\nwheelCircumference = 12.566\nwheelDiameter = 4\ngearRatio = 1\nautonDrivePCT = 50\nleftMotorDegreesPerInch = 10.475\nrightMotorDegreesPerInch = 10.475\nspeedChangePerLoop = 0.06\nleftCurrentPosi = 1\nrightCurrentPosi = 1\ntargetLeft = 100\ntargetRight = 100\n\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject: Vex Final Comp\n#\tAuthor: Ronak Kommineni\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\ndef reset_state():\n    print(\"Reseting motors\")\n    rightMG.set_position(0,TURNS)\n    leftMG.set_position(0,DEGREES)\n    rightMG.set_velocity(0,PERCENT)\n    leftMG.set_velocity(0,PERCENT)\n    print(\"Finished reseting motors\")\n    #auto_wait()\n\ndef stop_motors():\n    print(\"Motors stopping\")\n    rightMG.stop()\n    leftMG.stop()\n    print(\"Motors have stopped\")\n\ndef auto_wait():\n    print(\"auto wait has started\")\n    leftmg_running = True \n    rightmg_running = True\n    while leftmg_running == True or rightmg_running == True:\n        rightmg_running = rightMG.is_spinning()\n        leftmg_running = leftMG.is_spinning()\n        print(\"waiting Left Position:\"+ str(leftMG.position(DEGREES)) + \" Right Position:\" + str(rightMG.position(DEGREES)))\n        wait(5, MSEC)\n    print(\"stopped Left Position:\"+ str(leftMG.position(DEGREES)) + \" Right Posistion:\" + str(rightMG.position(DEGREES)))  \n    print(\"auto_wait is finished\")\n\ndef liftAuto_Wait():\n    print(\"auto wait for lift has started\") \n    Feed_running = True\n    while Feed_running == True:\n        Feed_running = Feed.is_spinning()\n        print(\"waiting Feed Position:\"+str(Feed.position(DEGREES)))\n        wait(5,MSEC)\n    print(\"stopped Feed position:\"+str(Feed.position(DEGREES)))  \n    print(\"auto_wait for lift has finished\")\ndef move_position(rightDirection, leftDirection, rightVelocity, leftVelocity, rightPosi, leftPosi):\n    print(\"Starting Move Posistion\", rightPosi, leftPosi)\n    leftCurrentPos = leftMG.position(DEGREES)\n    rightCurrentPos = rightMG.position(DEGREES)\n    print(\"Left Current Posi:\"+ str(leftCurrentPos))\n    print(\"Right Current Posi:\"+ str(rightCurrentPos))\n    rightMG.set_velocity(rightVelocity,PERCENT)\n    leftMG.set_velocity(leftVelocity,PERCENT)\n    #rightmg.spin(FORWARD)\n    #leftmg.spin(FORWARD)\n    rightMG.spin_for(rightDirection, rightPosi + rightCurrentPos, DEGREES, wait=False)\n    leftMG.spin_for(leftDirection, leftPosi + leftCurrentPos, DEGREES, wait=False)\n    #rightmg.spin_to_position(rightPosi + rightCurrentPos, DEGREES, wait=False)\n    #leftmg.spin_to_position(leftPosi + leftCurrentPos, DEGREES, wait=False)\n   \n    #rightmg.stop()\n    #leftmg.stop()\n    print(\"Move position completed\")\n\ndef bottom_right_position():\n    reset_state()\n    #current_right_posi = rightmg.position(DEGREES)\n    #current_left_posi = leftmg.position(DEGREES)\n    move_position(FORWARD,FORWARD,40, 40, 756, 756)\n    #wait(5,SECONDS)\n    auto_wait()\n    reset_state()\n    move_position(FORWARD,REVERSE,20, -20, 144, 180)\n    #wait(5,SECONDS)\n    auto_wait()\n    reset_state()\n    move_position(FORWARD,FORWARD,40, 40, 756, 756)\n    #wait(5,SECONDS)\n    auto_wait()\n    reset_state()\n    move_position(REVERSE,REVERSE,-40, -40, 756, 756)\n    #wait(5,SECONDS)\n    auto_wait()\n    reset_state()\n    move_position(REVERSE,FORWARD,-20, 20, 144, 180)\n    #wait(5,SECONDS)\n    auto_wait()\n    reset_state()\n    move_position(REVERSE,REVERSE,-40, -40, 756, 756)\n    #stop()\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    bottom_right_position()\n    # place automonous code here\n\ndef user_control():\n    brain.screen.clear_screen()\n    global LeftVelo, printPeriodic, RightVelo, vexcode_brain_precision, vexcode_console_precision,vexcode_controller_1_precision\n\n    printPeriodic = 0\n    RightVelo = 0\n    LeftVelo = 0\n    \n\n    # Setup lift positions and defaults\n    liftM6.set_velocity(50, PERCENT)\n    \n    Feed.set_velocity(50,PERCENT)\n    #Array of posistions that the lift motor can be at\n    liftPositions = [0,100,200,300,400,500,600,700,800,900,1000,1100,1200]\n    CranePositions = [0,1000,2000,3000,4000,5000,6000,7000,8000,9000,10000,11000,12000,12600]\n    LiftPosi = 0\n    CranePosi = 0\n    craneMin = 0\n    craneMax = 12600\n    craneStepper = 500\n    liftMin = 0\n    liftMax = 1000\n    liftStepper = 100\n    #Reseting motors to think it's at 0\n    liftM6.set_position(0, DEGREES)\n    Crane.set_position(0,DEGREES)\n    Feed.set_position(0,DEGREES)\n    button_mode = \"crane\"\n\n    def run_on_button_pressed():\n        print(\"button pressed\")\n    \n\n    controller_1.buttonA.pressed(run_on_button_pressed)    \n    # Main loop\n    while True:\n        #Set drive motor group velocities based on axis 1 and 2\n        LeftVelo = controller_1.axis2.position() + controller_1.axis1.position()\n        RightVelo = controller_1.axis2.position() - controller_1.axis1.position()\n        leftMG.set_velocity(LeftVelo, PERCENT)\n        rightMG.set_velocity(RightVelo, PERCENT)\n        #print(LeftVelo)\n        #Spin drive motors as requested\n        leftMG.spin(FORWARD)\n        rightMG.spin(FORWARD)\n        \n       # for i in range():\n       #     LiftPosi =  LiftPosi + 1\n\n\n        if controller_1.buttonR1.pressing() and (LiftPosi < len(liftPositions)-1): # and liftM6.is_done():\n            #presses up button goes to goes the next higher posistion in array\n            LiftPosi =  LiftPosi + 1\n            \n            #Calating how far the motor has to move\n            liftdegrees = liftPositions[LiftPosi]-liftM6.position(DEGREES)\n            liftM6.spin_for(FORWARD, liftdegrees, DEGREES, wait=False)\n\n        if controller_1.buttonR2.pressing()  and LiftPosi > 0:   # and liftM6.is_done():\n            #presses down button goes to next lower posistion\n            LiftPosi =  LiftPosi - 1\n\n            #Calating how far the motor has to move\n            liftdegrees = liftPositions[LiftPosi]-liftM6.position(DEGREES)\n            liftM6.spin_for(FORWARD, liftdegrees, DEGREES, wait=False)\n\n        if controller_1.buttonL1.pressing() and (CranePosi < len(CranePositions)-1): \n            #presses up button goes to goes the next higher posistion in array\n            CranePosi = CranePosi +1\n            #Calating how far the motor has to move # change all to feed\n            CraneDegrees = CranePositions[CranePosi] - Crane.position(DEGREES)\n            print(\"Crane Degrees:\"+str(CraneDegrees))\n            print(\"Crane Position:\"+str(Crane.position(DEGREES)))\n            Crane.set_max_torque(100,PERCENT)\n            Crane.set_velocity(100,PERCENT)\n            Crane.spin_for(FORWARD,CraneDegrees,DEGREES,wait=False)\n            while Crane.is_spinning():\n                print(\"Crane is spinnig: \" + str(Crane.position(DEGREES)))\n                wait(5,MSEC)\n            print(\"Crane Finished\")\n\n\n        if controller_1.buttonL2.pressing() and CranePosi > 0:\n            CranePosi = CranePosi - 1\n            \n            #Calating how far the motor has to move\n            CraneDegrees = CranePositions[CranePosi]-Crane.position(DEGREES)\n            Crane.spin_for(FORWARD, CraneDegrees, DEGREES, wait=True)\n            print()\n        \n        FeedVelo = controller_1.axis4.position() + controller_1.axis3.position()\n        Feed.set_velocity(FeedVelo, PERCENT)\n        Feed.spin(FORWARD)\n\n        \n\n        if controller_1.buttonUp.pressing():\n           Feed.set_velocity(0,PERCENT)\n           CraneDegrees = CranePositions[CranePosi] - Crane.position(DEGREES)\n           CraneVelo = controller_1.axis4.position() + controller_1.axis3.position()\n           Crane.set_velocity(CraneVelo,PERCENT)\n           Crane.spin(FORWARD)\n           print(\"Crane is spinnig: \" + str(Crane.position(DEGREES)))\n           wait(5,MSEC)\n\n\n        # Function to run when the event occurs\n        \n      \n\n        \n        # Print to the brain once ever 350 loops or approximately once a sec\n        if printPeriodic > 350:\n            brain.screen.clear_screen()\n            brain.screen.set_cursor(1,1)\n            #Disp is a dictionary of elements to print to the brain\n            disp = {\"LeftVelo\":LeftVelo,\"RightVelo\":RightVelo,\"liftM6Velo\":liftM6.velocity(PERCENT),\n            \"RightM Posi\": rightMG.position(DEGREES), \"LeftM Posi\": leftMG.position(DEGREES),\n            \"LiftPosi\":LiftPosi,\"liftM6Pos\":liftM6.position(DEGREES)}\n\n            for label, amount in disp.items():\n\n                print(label + ':' + str(amount))\n                \n                brain.screen.print(label + ':' + str(amount) , precision=6 if vexcode_brain_precision \n                is None else vexcode_brain_precision)\n                brain.screen.next_row()\n\n            printPeriodic = 0\n        else:\n            printPeriodic = printPeriodic + 1\n\n\n\n        wait(5, MSEC)\n\n# create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[2],"name":"Feed","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[6],"name":"liftM6","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[17],"name":"Crane","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[13,20],"name":"rightMG","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[1,9],"name":"leftMG","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio36_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20211013.15.00.00","appVersion":"2.2.1","fileFormat":"1.0.1","icon":"","targetBrainGen":"First","target":"Physical"}